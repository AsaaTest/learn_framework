<?php

namespace Learn\Routing;

use Learn\Http\Request;
use Learn\Routing\Route;
use Learn\Http\HttpNotFoundException;
use Learn\Http\Response;

/**
 * Class Router
 *
 * handle routes
 */
class Router
{
    /**
     * variable storage defined routes
     *
     * @var array
     */
    protected array $routes = [];

    /**
     * construct
     */
    public function __construct()
    {
        // define array with main methods http
        $this->routes = [
            "GET" => [],
            "POST" => [],
            "PUT" => [],
            "PATCH" => [],
            "DELETE" => []
        ];
    }

    /**
     * Resolve a route and get the action for the requested route.
     *
     * @param Request $request
     * @return mixed
     */
    public function resolveRoute(Request $request)
    {
        // Iterate over the registered routes for the specific HTTP method.
        foreach ($this->routes[$request->method()] as $route) {
            // Check if the route matches the requested URI using the "matches" method of the "Route" class.
            if ($route->matches($request->uri())) {
                return $route; // Return the matching route.
            }
        }
        throw new HttpNotFoundException(); // Throw an exception if no matching route is found.
    }

    /**
     * Resolve the route associated with the incoming request and process it.
     *
     * @param Request $request The incoming HTTP request to be resolved.
     * @return Response The response generated by processing the resolved route.
     */
    public function resolve(Request $request): Response
    {
        // Resolve the route associated with the request using the "resolveRoute()" method of the router.
        $route = $this->resolveRoute($request);

        // Assign the resolved route to the request object so that it can be accessed by other components.
        $request->setRoute($route);

        // Get the action associated with the resolved route.
        $action = $route->action();

        // Check if the route has configured middlewares.
        if ($route->hasMiddlewares()) {
            // If there are middlewares, execute the "runMiddlewares()" function to process them.
            return $this->runMiddlewares($request, $route->middlewares(), $action);
        }

        // If there are no middlewares, execute the main action directly and return the response generated by it.
        return $action($request);
    }

    /**
     * Run a chain of middlewares in sequence.
     *
     * @param Request $request The incoming HTTP request.
     * @param array $middlewares An array of middleware components to run.
     * @param mixed $target The final action to be executed.
     * @return Response The response generated after processing the middlewares.
     */
    protected function runMiddlewares(Request $request, array $middlewares, $target): Response
    {
        // If there are no more middlewares to process, execute the final action.
        if (count($middlewares) == 0) {
            return $target($request);
        }

        // Execute the first middleware in the array and pass a closure that continues processing the remaining middlewares.
        return $middlewares[0]->handle(
            $request,
            fn ($request) => $this->runMiddlewares($request, array_slice($middlewares, 1), $target)
        );
    }


    /**
     * Method for registering a route for the GET HTTP method.
     *
     * @param string $uri    The URI of the route.
     * @param callable $action A callback function or closure associated with the route.
     *
     * @return Route
     */
    public function get(string $uri, callable $action): Route
    {
        return $this->registerRoute("GET", $uri, $action);
    }

    /**
     * Method for registering a route for the POST HTTP method.
     *
     * @param string $uri    The URI of the route.
     * @param callable $action A callback function or closure associated with the route.
     *
     * @return Route
     */
    public function post(string $uri, callable $action): Route
    {
        return $this->registerRoute("POST", $uri, $action);
    }

    /**
     * Method for registering a route for the PUT HTTP method.
     *
     * @param string $uri    The URI of the route.
     * @param callable $action A callback function or closure associated with the route.
     *
     * @return Route
     */
    public function put(string $uri, callable $action): Route
    {
        return $this->registerRoute("PUT", $uri, $action);
    }

    /**
     * Method for registering a route for the PATCH HTTP method.
     *
     * @param string $uri    The URI of the route.
     * @param callable $action A callback function or closure associated with the route.
     *
     * @return Route
     */
    public function patch(string $uri, callable $action): Route
    {
        return $this->registerRoute("PATCH", $uri, $action);
    }

    /**
     * Method for registering a route for the DELETE HTTP method.
     *
     * @param string $uri    The URI of the route.
     * @param callable $action A callback function or closure associated with the route.
     *
     * @return Route
     */
    public function delete(string $uri, callable $action): Route
    {
        return $this->registerRoute("DELETE", $uri, $action);
    }

    /**
     * Register new route in router
     *
     * @param string $method HTTP method
     * @param string $uri URI of the route
     * @param \Closure|array $action action associed to route
     * @return Route
     */
    protected function registerRoute(string $method, string $uri, \Closure|array $action): Route
    {
        $route = new Route($uri, $action);
        // Crea un nuevo objeto "Route" con la URI y la acciÃ³n proporcionadas y lo agrega al array de rutas.
        $this->routes[$method][] = $route;
        return $route;
    }
}
